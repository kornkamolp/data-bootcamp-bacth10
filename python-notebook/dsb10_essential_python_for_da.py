# -*- coding: utf-8 -*-
"""DSB10_Essential_Python_for_DA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qeCAsBNGu-0oAzMIgX0dK_wJgpJqARWF

## Outline Essential Python for Data
- Review data structures
- OOP: Object Oriented Programming
- Request API
- Read SQLite
- Library: numpy
"""

# review data structure
# list, tuple, dictionary, set
friend = ["pp", "jenny", "cake", 11, 12, 30, 25, [1,2,3],{"orang", "banana", "apple"}]

len(friend)

friend[8]

x = 100
y = 200

## handle the error
try:
    1/0
except:
    print("error")
finally:
    print("this is completed")

## dictionary
## key:value
friend = {
    "name": "PP",
    "age": 25,
    "page": ["kornkamolp", "cake"],
    42: "favarite number"
    }

# example loop in dictionary
fruits = ["orange", "banana", "orange", "banana", "orange", "banana"]

result = {} # empty dict

for fruit in fruits:
    if fruit in result:
        result[fruit] += 1
    else:
        result[fruit] = 1

print(result)

"""## OOP
object Oriented Programming
"""

class MooDeng():
    def __init__(self, name, age, species):
        self.name = name
        self.age = age
        self.species = species

    def hello(self):
        print("I'm MooDeng!")

    def sleep(self):
        print("I am goging to bed now")

md = MooDeng("moodeng", 1, "hippo")

# create method
md.hello()
md.sleep()

type(md)

print(md.name, md.age, md.species)

jenny = MooDeng("jane", 2, "monkey")
print(jenny.name, jenny.age, jenny.species)

class User():
    ## attribute
    def __init__(self, name, age, gender, city):
        self.name = name
        self.age = age
        self.gender = gender
        self.city = city

    ## method
    def upload_image(self):
        ## take image from a user

        print("Upload image successfully!")

    def add_age(self):
        self.age += 1

    def minus_age(self):
        self.age -= 1

    ## string representation
    def __str__(self):
        text = f"{self.name} is a {self.gender}, {self.age} year old live in {self.city}"
        return text

user1 = User("toy", 36, "male", "bangkok")
user1.upload_image()

user2 = User("Jessica", 24, "Female", "London")

print(user1)
print(user2)

# use method to add value age
user1.add_age()
user1.add_age()
user1.add_age()
user1.add_age()


print(user1.age)

## homework OOP create ATM
# 4-5 methods
class ATM:
    pass

"""## Read CSV file
import csv
"""

!pwd

!ls

!mkdir newFolder

!rmdir newFolder

import csv

data = []

try:
    ## context manager
    with open("school.csv", "r") as file:
        reader = csv.reader(file)
        for row in reader:
            data.append(row)

except:
    print("file not found, please check the filename again.")

print(data)

!pip install pandas
import pandas as pd

df = pd.read_csv("school.csv")

df["country"]

!pip install gazpacho

#!pip list

## how to write a csv
# csv.writer()
import csv

## nested list
header = ["Name", "Age", "City"] #  header data

data = [ # body data
    ["Alice", 30, "New York"],
    ["Bob", 25, "Los Angeles"],
    ["Charlie", 35, "Paris"]
]

with open("new_example.csv", "w") as file:
    writer = csv.writer(file)
    writer.writerow(header)
    writer.writerows(data)

!cat new_example.csv # write file

import pandas as pd
df = pd.read_csv("new_example.csv")

df

df["Age"] += 1
df["Country"] = ["USA", "UK", "France"]
df["Company"] = ["Google", "Amazon", "PTT"]

df

#json => API
# javascript object notation
toy_dict = {
    "name": "toy",
    "age": 36,
    "fav_movie": ["superman", "loki"]
}

toy_dict

import json

# write dict to json file
with open("ppdata.json", "w") as file:
    json.dump(toy_dict, file)

!cat ppdata.json

# read json to dict in python
with open("ppdata.json", "r") as file:
    data = json.load(file)

print(data, type(data))

"""## JSON : JavaScript Object Notation

import `json`

json.dump() # write

json.load() # read

json == dict in python

## API
"""

# import requests
from requests import get

response = get("https://swapi.dev/api/people/1")

response.status_code

response.json()["name"]

# get data from id 1-5
from requests import get
from time import sleep

base_url = "http://swapi.dev/api/people/"

for i in range(1, 6): # not include 6
    api_url = base_url + str(i)
    response = get(api_url)
    print(response.json()["name"])
    sleep(2) # break 2 seconds

base_url = "http://swapi.dev/api/people/"

characters = []

for i in range(1, 6): # not include 6
    api_url = base_url + str(i)
    response = get(api_url)
    response_js = response.json()
    name = response_js["name"]
    height = response_js["height"]
    mass = response_js["mass"]
    result = [name, height, mass]
    characters.append(result)
    sleep(2) # break 2 seconds

print(characters)

import csv

header = ["name", "height", "mass"]
with open("starwars.csv", "w") as file:
    writer = csv.writer(file)
    writer.writerow(header)
    writer.writerows(characters)

!cat starwars.csv

"""## Gazpacho
Basic web scraping with Gazpacho
"""

# !pip install gazpacho
from gazpacho import Soup
from requests import get

url = "https://datarockie.com"

web = get(url)

datarockie = Soup(web.text)

print(type(datarockie))

# find information we want form this soup
datarockie.find("h2", mode = "first").strip() # strip removes

for h2 in datarockie.find("h2"):
    print(h2.strip())

for h4 in datarockie.find("h4"):
    print(h4.strip())

import sqlite3
import pandas as pd # dataframe

## create connection
con = sqlite3.connect("chinook.db")

df = pd.read_sql("select * from customers limit 5",con)

df.head()

df[["FirstName", "LastName", "City"]]

con.close()

## concat

import pandas as pd

# Create two sample DataFrames
df1 = pd.DataFrame({'A':['A0', 'A1', 'A2'],
                    'B':['B0', 'B1', 'B2']},
                   index=[0, 1, 2])
df2 = pd.DataFrame({'A':['A3', 'A4', 'A5'],
                    'B':['B3', 'B4', 'B5']},
                   index=[3, 4, 5])

# union data
pd.concat([df1, df2]) # append, select * from d1 union all select * from df 2

## homework
# 1. ATM oop class
# 2. public api requests

# numerical python
import numpy as np

gpa = [3.4, 3.5, 4.00, 2.9] #sum min max

sum(gpa) / len(gpa)

gpa = np.array(gpa)

type(gpa)

print(gpa.mean()) #method
print(np.mean(gpa)) #function

np.median(gpa)